[{"title":"Exception--The specified child already has a parent.","date":"2016-05-18T08:01:22.000Z","path":"2016/05/18/2016-05-18-Exception/","text":"1.此异常出现在对ViewPager设置Adapter的时候，在第二次设置的时候在instantiateItem函数中container调用addview，由于第二次调用意在刷新，并且该view不是new 出来的对象，由于用的是之前的view，所以在addView(view)的时候由于该view已经有parent，再次进行addview会抛出此异常。此时需要在调用addview()之前进行如下判断：ViewGroup parent = (ViewGroup) view.getParent();if (parent != null) { parent.removeAllViewsInLayout();}上段代码先判断是否有parent有的话移出所有view，然后再进行addView(view)既能解决该异常。","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"EventBus了解","date":"2016-05-12T10:56:57.000Z","path":"2016/05/12/2016-05-12-EventBus/","text":"###简介EventBus从字面意思来理解，事件总线。一个主要用于订阅、发布事件的总线。可以代替Intent,Handler,BroadCast在线程间传递消息。 Event:发布的事件,Post方法中为Object，说明可以为任意类型。 Subscriber：事件订阅者，接收Event 接收事件，由onEvent开头的函数来订阅。EventBus3.0以后通过注解方式来订阅，@Subscribe对方法进行注解即可订阅事件，方法名不需要以onEvent固定开头。接收方法运行线程有4中，3.0中在Annotation中的括号中以@Subscribe(threadMode = ?)来声明。threadmode有4中分别为ThreadMode.POSTING、ThreadMode.MAIN、ThreadMode.BACKGROUND、ThreadMode.ASYNC.Publisher:事件发布者，通过post()方法来发送事件。 发送事件，EventBus.getDefault().post(Object event)，来进行发送。使用注册EventBus的注册类似于Android中的广播，要注意register的同时进行ungister.方法如下： EventBus.getDefault().register(this);EventBus.getDefault().unregister(this);此段代码可以用在Activity、Fragment等的父类中，子类无需在进行注册，但是需要注意在3.0版本中需要在父类中声明一个带有注解空方法，否则如果子类中没有订阅会报找不到@Subscribe的错误，在3.0以下版本需要声明onEvent方法。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"事件分发机制分析","date":"2015-04-03T15:58:46.000Z","path":"2015/04/03/2015-04-03-事件分发机制分析/","text":"","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]}]